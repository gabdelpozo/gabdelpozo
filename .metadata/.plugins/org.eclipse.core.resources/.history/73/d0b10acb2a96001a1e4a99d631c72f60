

#include <stdio.h>
#include <stdlib.h>

#include "Cliente.h"
#include "Publicacion.h"
#include "utn.h"
#include "Informes.h"
#define CANTIDAD_CLIENTES 		100
#define CANTIDAD_PUBLICACIONES 1000
static const char ESTADOS[2][8]={"PAUSADO","ACTIVO"};
int main(void) {

	Publicacion arrayPublicaciones[CANTIDAD_PUBLICACIONES];
	Cliente arrayClientes[CANTIDAD_CLIENTES];
	int opcionAvisos;
	int maxAvisos;
	int avisosActivos;
	int auxiliarId;
	int avisosPausados;
	int contAvisos;
	int idClientes=0;
	int idPublicaciones=0;
	int opcion;
	int auxiliarIndice;
	int auxiliarIdClientes;
	int auxiliarIdPublicacion;
	int auxiliarIndicePublicacion;
	char auxiliarCuit[CUIT_LEN];
	int contadorPub = 0;


	if(cli_inicializarArray(arrayClientes,CANTIDAD_CLIENTES) == 0)
	{
		printf(" ");
	}

	if(pub_inicializarArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES) == 0)
	{
		printf("\n");
	}

	printf("PRIMER PARCIAL PROGRAMACION 1");
//
//	cli_altaForzadaArray(arrayClientes,CANTIDAD_CLIENTES,0,&idClientes,"Fernando","Ruiz","232323239");
//	cli_altaForzadaArray(arrayClientes,CANTIDAD_CLIENTES,1,&idClientes,"Lucas","Perez", 23383583519,1);
//	cli_altaForzadaArray(arrayClientes,CANTIDAD_CLIENTES,2,&idClientes,"Gabriel","Blanco", 24345533457,0);

//	pub_altaForzadaArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,0,&idPublicaciones,1,"Aviso Periodistico","1234",2);
//	pub_altaForzadaArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,1,&idPublicaciones,1,"Aviso de Deportes","1234",10);
//	pub_altaForzadaArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,2,&idPublicaciones,1,"Aviso de Espectaculos","1234",20);
//	pub_altaForzadaArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,3,&idPublicaciones,0,"Aviso de Musica","2222",2);
//	pub_altaForzadaArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,4,&idPublicaciones,0,"Aviso de Economia","2222",10);
//	pub_altaForzadaArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,5,&idPublicaciones,2,"Aviso de Actualidad","2222",20);
	do
	{
		if(!utn_getNumero(	&opcion,
							"\n\n1.Cargar un Cliente"
							"\n2.Modificar un Cliente"
							"\n3.Eliminar un Cliente"
							"\n4.Publicar un nuevo aviso"
							"\n5.Pausar aviso"
							"\n6.Reanudar aviso"
							"\n7.Consulta facturaciÃ³n"
							"\n8.Imprimir Publicacion"
							"\n9.Imprimir lista Cliente"
							"\n10.Informar"

							"\n11.Salir\n\n",

							"\nError opcion invalida",1,11,2) )
		{
			switch(opcion)
			{
			case 1:
				auxiliarIndice = cli_getEmptyIndex(arrayClientes,CANTIDAD_CLIENTES);
				if(auxiliarIndice >= 0)
				{
					if(cli_altaArray(arrayClientes,CANTIDAD_CLIENTES,auxiliarIndice,&idClientes) == 0)
					{
						printf("\nCarga realizada con exito\n");
					}
				}
				else
				{
					printf("\nNO HAY MAS LUGAR");
				}
				break;

			case 2:
				cli_imprimirArray(arrayClientes,CANTIDAD_CLIENTES);
				if(utn_getNumero(&auxiliarIdClientes,"\nIndique el ID del cliente a modificar: ","\nID invalido",0,idClientes,0) == 0)
				{
					auxiliarIndice = cli_buscarId(arrayClientes,CANTIDAD_CLIENTES,auxiliarIdClientes);
					if(	auxiliarIndice >= 0 &&
							cli_modificarArray(arrayClientes,CANTIDAD_CLIENTES,auxiliarIndice) == 0)
					{
						printf("\nModificacion de cliente realizada con exito\n");
					}
				}
				break;

			case 3:
				cli_imprimirArray(arrayClientes,CANTIDAD_CLIENTES);
				if(utn_getNumero(&auxiliarIdClientes,"\nIndique el ID del Cliente a eliminar: ","\nID invalido",0,idClientes,0)==0)
				{
					auxiliarIndice = cli_buscarId(arrayClientes,CANTIDAD_CLIENTES,auxiliarIdClientes);
					if(	auxiliarIndice >= 0 &&
							cli_bajaArray(arrayClientes,CANTIDAD_CLIENTES,auxiliarIndice)== 0)
					{
						printf("\nBaja de cliente realizada con exito\n");
					}
				}
				break;

			case 4:
				auxiliarIndicePublicacion = pub_getEmptyIndex(arrayPublicaciones,CANTIDAD_PUBLICACIONES);
				if(auxiliarIndicePublicacion >= 0)
				{
					cli_imprimirArray(arrayClientes,CANTIDAD_CLIENTES);
					if(	utn_getNumero(&auxiliarIdClientes,"\nID del Cliente: ","\nError",0,10000,2) == 0 &&
						cli_buscarId(arrayClientes,CANTIDAD_CLIENTES,auxiliarIdClientes) != -1)
					{
						pub_altaArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,auxiliarIndicePublicacion,&idPublicaciones,auxiliarIdClientes);
					}
					else
					{
						printf("\nEL ID NO EXISTE");
					}
				}
				break;

			case 5:
				pub_imprimirArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES);
			if(utn_getNumero(&auxiliarIdClientes,"\nIndique el ID de la Publicacion a Pausar: ","\nID invalido",0,idClientes,0)==0)
			{
				auxiliarIndicePublicacion = pub_buscarId(arrayPublicaciones,CANTIDAD_PUBLICACIONES,auxiliarIdPublicacion);
				if(auxiliarIndicePublicacion != -1)
				{
					pub_pausarArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,auxiliarIndicePublicacion);
				}
			}
			else
			{
				printf("\nPUBLICACION NO ENCONTRADA");
			}
			break;

			case 6:
				pub_imprimirArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES);
			if(utn_getNumero(&auxiliarIdClientes,"\nIndique el ID de la Publicacion a Reanudar: ","\nID invalido",0,idClientes,0)==0)
			{
				auxiliarIndicePublicacion = pub_buscarId(arrayPublicaciones,CANTIDAD_PUBLICACIONES,auxiliarIdPublicacion);
				if(auxiliarIndicePublicacion != -1)
				{
					pub_activarArray(arrayPublicaciones,CANTIDAD_PUBLICACIONES,auxiliarIndicePublicacion);
				}
			}
			else
			{
				printf("\nPUBLICACION NO ENCONTRADA");
			}
			break;

			case 7:

				for(int i=0;i<CANTIDAD_CLIENTES;i++)
				{
					if(arrayClientes[i].isEmpty == 0)
					{
						cli_imprimir(&arrayClientes[i]);

						contadorPub = 0;

						for(int j=0;j<CANTIDAD_PUBLICACIONES;j++)
						{
							if(arrayPublicaciones[j].isEmpty == 0)
							{
								if(arrayClientes[i].idCliente == arrayPublicaciones[j].idCliente)
								{
									if(arrayPublicaciones[j].estado == 1)
									{
										contadorPub++;
									}
								}
							}
						}
						printf("\nCantidad de publicaciones activas del cliente: %d\n",contadorPub);
					}
				}
				break;

			case 8:
				for(int i=0; i<CANTIDAD_PUBLICACIONES;i++)
				{
					if(arrayPublicaciones[i].isEmpty == 0)
					{
					pub_imprimir(&arrayPublicaciones[i]);
					printf("\nEl CUIT del cliente es: %s - Estado de la publicacion: %s\n",&arrayClientes[arrayPublicaciones[i].idCliente].cuit,ESTADOS[arrayPublicaciones[i].estado]);
					}
				}
				break;

			case 9:

				printf("\n1- Cliente con mas avisos Activos\n2- Cliente con mas avisos Pausados\n3- Cliente con mas avisos :");
				scanf("%d",&opcionAvisos);

				switch (opcionAvisos) {
					case 1:
						info_imprimirClientesConMasAvisosActivos(arrayPublicaciones,CANTIDAD_PUBLICACIONES,arrayClientes,CANTIDAD_CLIENTES);
						break;
					case 2:
						maxAvisos = -1;
						for(int i = 0 ; i < CANTIDAD_CLIENTES ; i++){
							cli_imprimir(&arrayClientes[i]);
							if(arrayClientes[i].isEmpty == 0){
							avisosPausados= 0;
							for(int j = 0 ; j < CANTIDAD_PUBLICACIONES ; j++){
								if (arrayPublicaciones[j].isEmpty == 0){
									if(arrayClientes[i].idCliente == arrayPublicaciones[j].idCliente && arrayPublicaciones[j].estado == 0){
										avisosPausados++;
									}
								}
							}
								if(avisosPausados > maxAvisos){
									auxiliarId = arrayClientes[i].idCliente;
									maxAvisos = avisosPausados;
								}
							}
						}
						printf("\nCLIENTE CON MAX AVISOS PAUSADOS");
						cli_imprimir(&arrayClientes[auxiliarId]);
						printf("\nCantidad de avisos: %d",maxAvisos);
						break;
					case 3:
						maxAvisos = -1;
						for(int i = 0 ; i < CANTIDAD_CLIENTES ; i++){
							cli_imprimir(&arrayClientes[i]);
							if(arrayClientes[i].isEmpty == 0){
							contAvisos= 0;
							for(int j = 0 ; j < CANTIDAD_PUBLICACIONES ; j++){
								if (arrayPublicaciones[j].isEmpty == 0){
									if(arrayClientes[i].idCliente == arrayPublicaciones[j].idCliente){
										contAvisos++;
									}
								}
							}
								if(avisosPausados > maxAvisos){
									auxiliarId = arrayClientes[i].idCliente;
									maxAvisos = contAvisos;
								}
							}
						}
						printf("\nCLIENTE CON MAX AVISOS");
						cli_imprimir(&arrayClientes[auxiliarId]);
						printf("\nCantidad de avisos: %d",maxAvisos);
						break;
				}
				break;
			}
		}


	}while(opcion != 11);

	return EXIT_SUCCESS;
}




